// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: log/v1/resources.proto

package log

import (
	v1 "github.com/nlnwa/veidemann-api/go/commons/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrawlLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarcId       string                 `protobuf:"bytes,1,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	TimeStamp    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	StatusCode   int32                  `protobuf:"varint,4,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Size         int64                  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	RequestedUri string                 `protobuf:"bytes,6,opt,name=requested_uri,json=requestedUri,proto3" json:"requested_uri,omitempty"`
	ResponseUri  string                 `protobuf:"bytes,7,opt,name=response_uri,json=responseUri,proto3" json:"response_uri,omitempty"`
	// *
	// Get the discoveryPath,
	//
	//	R - Redirect
	//	E - Embed
	//	X - Speculative embed (aggressive/Javascript link extraction)
	//	L - Link
	//	P - Prerequisite (as for DNS or robots.txt before another URI)
	DiscoveryPath       string                 `protobuf:"bytes,8,opt,name=discovery_path,json=discoveryPath,proto3" json:"discovery_path,omitempty"`
	Referrer            string                 `protobuf:"bytes,9,opt,name=referrer,proto3" json:"referrer,omitempty"`
	ContentType         string                 `protobuf:"bytes,10,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	FetchTimeStamp      *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=fetch_time_stamp,json=fetchTimeStamp,proto3" json:"fetch_time_stamp,omitempty"`
	FetchTimeMs         int64                  `protobuf:"varint,12,opt,name=fetch_time_ms,json=fetchTimeMs,proto3" json:"fetch_time_ms,omitempty"`
	BlockDigest         string                 `protobuf:"bytes,13,opt,name=block_digest,json=blockDigest,proto3" json:"block_digest,omitempty"`
	PayloadDigest       string                 `protobuf:"bytes,14,opt,name=payload_digest,json=payloadDigest,proto3" json:"payload_digest,omitempty"`
	StorageRef          string                 `protobuf:"bytes,15,opt,name=storage_ref,json=storageRef,proto3" json:"storage_ref,omitempty"`
	RecordType          string                 `protobuf:"bytes,16,opt,name=record_type,json=recordType,proto3" json:"record_type,omitempty"`
	WarcRefersTo        string                 `protobuf:"bytes,17,opt,name=warc_refers_to,json=warcRefersTo,proto3" json:"warc_refers_to,omitempty"`
	IpAddress           string                 `protobuf:"bytes,18,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	ExecutionId         string                 `protobuf:"bytes,19,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Retries             int32                  `protobuf:"varint,20,opt,name=retries,proto3" json:"retries,omitempty"` // Number of times this uri has been retried. Zero means success on first attempt.
	Error               *v1.Error              `protobuf:"bytes,21,opt,name=error,proto3" json:"error,omitempty"`      // Contains the error reason if fetch failed
	JobExecutionId      string                 `protobuf:"bytes,22,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	CollectionFinalName string                 `protobuf:"bytes,23,opt,name=collection_final_name,json=collectionFinalName,proto3" json:"collection_final_name,omitempty"`
	Method              string                 `protobuf:"bytes,24,opt,name=method,proto3" json:"method,omitempty"` // The HTTP method (GET, POST, HEAD, ...)
}

func (x *CrawlLog) Reset() {
	*x = CrawlLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_v1_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlLog) ProtoMessage() {}

func (x *CrawlLog) ProtoReflect() protoreflect.Message {
	mi := &file_log_v1_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlLog.ProtoReflect.Descriptor instead.
func (*CrawlLog) Descriptor() ([]byte, []int) {
	return file_log_v1_resources_proto_rawDescGZIP(), []int{0}
}

func (x *CrawlLog) GetWarcId() string {
	if x != nil {
		return x.WarcId
	}
	return ""
}

func (x *CrawlLog) GetTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeStamp
	}
	return nil
}

func (x *CrawlLog) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *CrawlLog) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *CrawlLog) GetRequestedUri() string {
	if x != nil {
		return x.RequestedUri
	}
	return ""
}

func (x *CrawlLog) GetResponseUri() string {
	if x != nil {
		return x.ResponseUri
	}
	return ""
}

func (x *CrawlLog) GetDiscoveryPath() string {
	if x != nil {
		return x.DiscoveryPath
	}
	return ""
}

func (x *CrawlLog) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *CrawlLog) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *CrawlLog) GetFetchTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchTimeStamp
	}
	return nil
}

func (x *CrawlLog) GetFetchTimeMs() int64 {
	if x != nil {
		return x.FetchTimeMs
	}
	return 0
}

func (x *CrawlLog) GetBlockDigest() string {
	if x != nil {
		return x.BlockDigest
	}
	return ""
}

func (x *CrawlLog) GetPayloadDigest() string {
	if x != nil {
		return x.PayloadDigest
	}
	return ""
}

func (x *CrawlLog) GetStorageRef() string {
	if x != nil {
		return x.StorageRef
	}
	return ""
}

func (x *CrawlLog) GetRecordType() string {
	if x != nil {
		return x.RecordType
	}
	return ""
}

func (x *CrawlLog) GetWarcRefersTo() string {
	if x != nil {
		return x.WarcRefersTo
	}
	return ""
}

func (x *CrawlLog) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *CrawlLog) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CrawlLog) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *CrawlLog) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CrawlLog) GetJobExecutionId() string {
	if x != nil {
		return x.JobExecutionId
	}
	return ""
}

func (x *CrawlLog) GetCollectionFinalName() string {
	if x != nil {
		return x.CollectionFinalName
	}
	return ""
}

func (x *CrawlLog) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

// Log for each page including discovered resources and links
type PageLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarcId              string              `protobuf:"bytes,1,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	Uri                 string              `protobuf:"bytes,2,opt,name=uri,proto3" json:"uri,omitempty"`
	ExecutionId         string              `protobuf:"bytes,3,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`
	Referrer            string              `protobuf:"bytes,4,opt,name=referrer,proto3" json:"referrer,omitempty"`
	JobExecutionId      string              `protobuf:"bytes,5,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	CollectionFinalName string              `protobuf:"bytes,6,opt,name=collection_final_name,json=collectionFinalName,proto3" json:"collection_final_name,omitempty"`
	Method              string              `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"` // The HTTP method (GET, POST, HEAD, ...)
	Resource            []*PageLog_Resource `protobuf:"bytes,10,rep,name=resource,proto3" json:"resource,omitempty"`
	Outlink             []string            `protobuf:"bytes,11,rep,name=outlink,proto3" json:"outlink,omitempty"`
}

func (x *PageLog) Reset() {
	*x = PageLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_v1_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLog) ProtoMessage() {}

func (x *PageLog) ProtoReflect() protoreflect.Message {
	mi := &file_log_v1_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLog.ProtoReflect.Descriptor instead.
func (*PageLog) Descriptor() ([]byte, []int) {
	return file_log_v1_resources_proto_rawDescGZIP(), []int{1}
}

func (x *PageLog) GetWarcId() string {
	if x != nil {
		return x.WarcId
	}
	return ""
}

func (x *PageLog) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PageLog) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *PageLog) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *PageLog) GetJobExecutionId() string {
	if x != nil {
		return x.JobExecutionId
	}
	return ""
}

func (x *PageLog) GetCollectionFinalName() string {
	if x != nil {
		return x.CollectionFinalName
	}
	return ""
}

func (x *PageLog) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *PageLog) GetResource() []*PageLog_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *PageLog) GetOutlink() []string {
	if x != nil {
		return x.Outlink
	}
	return nil
}

// A resource used to complete a page. It might be embedded images, javascripts, stylesheets etc.
type PageLog_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri           string    `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	FromCache     bool      `protobuf:"varint,2,opt,name=from_cache,json=fromCache,proto3" json:"from_cache,omitempty"`
	Renderable    bool      `protobuf:"varint,3,opt,name=renderable,proto3" json:"renderable,omitempty"`
	ResourceType  string    `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	ContentType   string    `protobuf:"bytes,5,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	StatusCode    int32     `protobuf:"varint,6,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	DiscoveryPath string    `protobuf:"bytes,7,opt,name=discovery_path,json=discoveryPath,proto3" json:"discovery_path,omitempty"`
	WarcId        string    `protobuf:"bytes,8,opt,name=warc_id,json=warcId,proto3" json:"warc_id,omitempty"`
	Referrer      string    `protobuf:"bytes,9,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Error         *v1.Error `protobuf:"bytes,10,opt,name=error,proto3" json:"error,omitempty"`   // Contains the error reason if fetch failed
	Method        string    `protobuf:"bytes,11,opt,name=method,proto3" json:"method,omitempty"` // The HTTP method (GET, POST, HEAD, ...)
}

func (x *PageLog_Resource) Reset() {
	*x = PageLog_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_log_v1_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageLog_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageLog_Resource) ProtoMessage() {}

func (x *PageLog_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_log_v1_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageLog_Resource.ProtoReflect.Descriptor instead.
func (*PageLog_Resource) Descriptor() ([]byte, []int) {
	return file_log_v1_resources_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PageLog_Resource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *PageLog_Resource) GetFromCache() bool {
	if x != nil {
		return x.FromCache
	}
	return false
}

func (x *PageLog_Resource) GetRenderable() bool {
	if x != nil {
		return x.Renderable
	}
	return false
}

func (x *PageLog_Resource) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *PageLog_Resource) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *PageLog_Resource) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PageLog_Resource) GetDiscoveryPath() string {
	if x != nil {
		return x.DiscoveryPath
	}
	return ""
}

func (x *PageLog_Resource) GetWarcId() string {
	if x != nil {
		return x.WarcId
	}
	return ""
}

func (x *PageLog_Resource) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *PageLog_Resource) GetError() *v1.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *PageLog_Resource) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

var File_log_v1_resources_proto protoreflect.FileDescriptor

var file_log_v1_resources_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x06, 0x0a, 0x08,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x63, 0x49,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x55, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x55, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x10, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x61, 0x72, 0x63, 0x52, 0x65, 0x66, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61,
	0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0xb9, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x67,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x61, 0x72, 0x63, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x6f,
	0x62, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x42, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0xef,
	0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x61, 0x72, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x61, 0x72, 0x63, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x72, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x5e, 0x0a, 0x1e, 0x6e, 0x6f, 0x2e, 0x6e, 0x62, 0x2e, 0x6e, 0x6e, 0x61, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6c, 0x6f, 0x67, 0x2e,
	0x76, 0x31, 0x42, 0x0c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x50, 0x01, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e,
	0x6c, 0x6e, 0x77, 0x61, 0x2f, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x6c, 0x6f, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x6f, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_log_v1_resources_proto_rawDescOnce sync.Once
	file_log_v1_resources_proto_rawDescData = file_log_v1_resources_proto_rawDesc
)

func file_log_v1_resources_proto_rawDescGZIP() []byte {
	file_log_v1_resources_proto_rawDescOnce.Do(func() {
		file_log_v1_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_log_v1_resources_proto_rawDescData)
	})
	return file_log_v1_resources_proto_rawDescData
}

var file_log_v1_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_log_v1_resources_proto_goTypes = []interface{}{
	(*CrawlLog)(nil),              // 0: veidemann.api.log.v1.CrawlLog
	(*PageLog)(nil),               // 1: veidemann.api.log.v1.PageLog
	(*PageLog_Resource)(nil),      // 2: veidemann.api.log.v1.PageLog.Resource
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*v1.Error)(nil),              // 4: veidemann.api.commons.v1.Error
}
var file_log_v1_resources_proto_depIdxs = []int32{
	3, // 0: veidemann.api.log.v1.CrawlLog.time_stamp:type_name -> google.protobuf.Timestamp
	3, // 1: veidemann.api.log.v1.CrawlLog.fetch_time_stamp:type_name -> google.protobuf.Timestamp
	4, // 2: veidemann.api.log.v1.CrawlLog.error:type_name -> veidemann.api.commons.v1.Error
	2, // 3: veidemann.api.log.v1.PageLog.resource:type_name -> veidemann.api.log.v1.PageLog.Resource
	4, // 4: veidemann.api.log.v1.PageLog.Resource.error:type_name -> veidemann.api.commons.v1.Error
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_log_v1_resources_proto_init() }
func file_log_v1_resources_proto_init() {
	if File_log_v1_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_log_v1_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_v1_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_log_v1_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageLog_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_log_v1_resources_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_log_v1_resources_proto_goTypes,
		DependencyIndexes: file_log_v1_resources_proto_depIdxs,
		MessageInfos:      file_log_v1_resources_proto_msgTypes,
	}.Build()
	File_log_v1_resources_proto = out.File
	file_log_v1_resources_proto_rawDesc = nil
	file_log_v1_resources_proto_goTypes = nil
	file_log_v1_resources_proto_depIdxs = nil
}
