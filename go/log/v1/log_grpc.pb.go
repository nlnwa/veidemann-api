// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: log/v1/log.proto

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	// List crawl logs
	ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Log_ListCrawlLogsClient, error)
	// List page logs
	ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Log_ListPageLogsClient, error)
	// Write crawl logs
	WriteCrawlLog(ctx context.Context, opts ...grpc.CallOption) (Log_WriteCrawlLogClient, error)
	// Write page log
	WritePageLog(ctx context.Context, opts ...grpc.CallOption) (Log_WritePageLogClient, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) ListCrawlLogs(ctx context.Context, in *CrawlLogListRequest, opts ...grpc.CallOption) (Log_ListCrawlLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[0], "/veidemann.api.log.v1.Log/ListCrawlLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logListCrawlLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_ListCrawlLogsClient interface {
	Recv() (*CrawlLog, error)
	grpc.ClientStream
}

type logListCrawlLogsClient struct {
	grpc.ClientStream
}

func (x *logListCrawlLogsClient) Recv() (*CrawlLog, error) {
	m := new(CrawlLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) ListPageLogs(ctx context.Context, in *PageLogListRequest, opts ...grpc.CallOption) (Log_ListPageLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[1], "/veidemann.api.log.v1.Log/ListPageLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &logListPageLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Log_ListPageLogsClient interface {
	Recv() (*PageLog, error)
	grpc.ClientStream
}

type logListPageLogsClient struct {
	grpc.ClientStream
}

func (x *logListPageLogsClient) Recv() (*PageLog, error) {
	m := new(PageLog)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) WriteCrawlLog(ctx context.Context, opts ...grpc.CallOption) (Log_WriteCrawlLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[2], "/veidemann.api.log.v1.Log/WriteCrawlLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logWriteCrawlLogClient{stream}
	return x, nil
}

type Log_WriteCrawlLogClient interface {
	Send(*WriteCrawlLogRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type logWriteCrawlLogClient struct {
	grpc.ClientStream
}

func (x *logWriteCrawlLogClient) Send(m *WriteCrawlLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logWriteCrawlLogClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logClient) WritePageLog(ctx context.Context, opts ...grpc.CallOption) (Log_WritePageLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Log_ServiceDesc.Streams[3], "/veidemann.api.log.v1.Log/WritePageLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logWritePageLogClient{stream}
	return x, nil
}

type Log_WritePageLogClient interface {
	Send(*WritePageLogRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type logWritePageLogClient struct {
	grpc.ClientStream
}

func (x *logWritePageLogClient) Send(m *WritePageLogRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logWritePageLogClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	// List crawl logs
	ListCrawlLogs(*CrawlLogListRequest, Log_ListCrawlLogsServer) error
	// List page logs
	ListPageLogs(*PageLogListRequest, Log_ListPageLogsServer) error
	// Write crawl logs
	WriteCrawlLog(Log_WriteCrawlLogServer) error
	// Write page log
	WritePageLog(Log_WritePageLogServer) error
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) ListCrawlLogs(*CrawlLogListRequest, Log_ListCrawlLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCrawlLogs not implemented")
}
func (UnimplementedLogServer) ListPageLogs(*PageLogListRequest, Log_ListPageLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPageLogs not implemented")
}
func (UnimplementedLogServer) WriteCrawlLog(Log_WriteCrawlLogServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteCrawlLog not implemented")
}
func (UnimplementedLogServer) WritePageLog(Log_WritePageLogServer) error {
	return status.Errorf(codes.Unimplemented, "method WritePageLog not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_ListCrawlLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CrawlLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).ListCrawlLogs(m, &logListCrawlLogsServer{stream})
}

type Log_ListCrawlLogsServer interface {
	Send(*CrawlLog) error
	grpc.ServerStream
}

type logListCrawlLogsServer struct {
	grpc.ServerStream
}

func (x *logListCrawlLogsServer) Send(m *CrawlLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Log_ListPageLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PageLogListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServer).ListPageLogs(m, &logListPageLogsServer{stream})
}

type Log_ListPageLogsServer interface {
	Send(*PageLog) error
	grpc.ServerStream
}

type logListPageLogsServer struct {
	grpc.ServerStream
}

func (x *logListPageLogsServer) Send(m *PageLog) error {
	return x.ServerStream.SendMsg(m)
}

func _Log_WriteCrawlLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).WriteCrawlLog(&logWriteCrawlLogServer{stream})
}

type Log_WriteCrawlLogServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*WriteCrawlLogRequest, error)
	grpc.ServerStream
}

type logWriteCrawlLogServer struct {
	grpc.ServerStream
}

func (x *logWriteCrawlLogServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logWriteCrawlLogServer) Recv() (*WriteCrawlLogRequest, error) {
	m := new(WriteCrawlLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Log_WritePageLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServer).WritePageLog(&logWritePageLogServer{stream})
}

type Log_WritePageLogServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*WritePageLogRequest, error)
	grpc.ServerStream
}

type logWritePageLogServer struct {
	grpc.ServerStream
}

func (x *logWritePageLogServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logWritePageLogServer) Recv() (*WritePageLogRequest, error) {
	m := new(WritePageLogRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "veidemann.api.log.v1.Log",
	HandlerType: (*LogServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCrawlLogs",
			Handler:       _Log_ListCrawlLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListPageLogs",
			Handler:       _Log_ListPageLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteCrawlLog",
			Handler:       _Log_WriteCrawlLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WritePageLog",
			Handler:       _Log_WritePageLog_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "log/v1/log.proto",
}
