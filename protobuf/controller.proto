syntax = "proto3";

package veidemann.api;
option go_package = "veidemann_api";
option java_package = "no.nb.nna.veidemann.api";
option java_outer_classname = "ControllerProto";

import "config.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Veidemann Controller API"
    version: "0.2.0"
    contact: {
      name: "Veidemann"
      url: "https://github.com/nlnwa/veidemann-api"
    }
  }
  schemes: [
    HTTP, HTTPS, WS, WSS
  ];
};

// Service for communicating with controller.
service Controller {
    // Get a crawl entity by ID
    rpc GetCrawlEntity (GetRequest) returns (CrawlEntity) {
        option (google.api.http) = {
            get: "/api/control/entities/{id}"
        };
    }
    // List a set of crawl entities
    rpc ListCrawlEntities (ListRequest) returns (CrawlEntityListReply) {
        option (google.api.http) = {
            get: "/api/control/entities"
        };
    }
    // Save a crawl entity
    rpc SaveEntity (CrawlEntity) returns (CrawlEntity) {
        option (google.api.http) = {
            put: "/api/control/entities"
            body: "*"
            additional_bindings {
                post: "/api/control/entities/{id}"
				body: "*"
			}
        };
    }
    // Delete a crawl entity
    rpc DeleteEntity (CrawlEntity) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/entities/{id}"
        };
    }

    // Get a seed by ID
    rpc GetSeed (GetRequest) returns (Seed) {
        option (google.api.http) = {
            get: "/api/control/seeds/{id}"
        };
    }
    // List a set of seeds
    rpc ListSeeds (SeedListRequest) returns (SeedListReply) {
        option (google.api.http) = {
            get: "/api/control/seeds"
        };
    }
    rpc SaveSeed (Seed) returns (Seed) {
        option (google.api.http) = {
            put: "/api/control/seeds"
            body: "*"
            additional_bindings {
                post: "/api/control/seeds/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteSeed (Seed) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/seeds/{id}"
        };
    }

    // Get a crawl job by ID
    rpc GetCrawlJob (GetRequest) returns (CrawlJob) {
        option (google.api.http) = {
            get: "/api/control/crawljobs/{id}"
        };
    }
    // List a set of crawl jobs
    rpc ListCrawlJobs (ListRequest) returns (CrawlJobListReply) {
        option (google.api.http) = {
            get: "/api/control/crawljobs"
        };
    }
    rpc SaveCrawlJob (CrawlJob) returns (CrawlJob) {
        option (google.api.http) = {
            put: "/api/control/crawljobs"
            body: "*"
            additional_bindings {
                post: "/api/control/crawljobs/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteCrawlJob (CrawlJob) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/crawljobs/{id}"
        };
    }

    // Get a crawl config by ID
    rpc GetCrawlConfig (GetRequest) returns (CrawlConfig) {
        option (google.api.http) = {
            get: "/api/control/crawlconfigs/{id}"
        };
    }
    // List a set of crawl configs
    rpc ListCrawlConfigs (ListRequest) returns (CrawlConfigListReply) {
        option (google.api.http) = {
            get: "/api/control/crawlconfigs"
        };
    }
    rpc SaveCrawlConfig (CrawlConfig) returns (CrawlConfig) {
        option (google.api.http) = {
            put: "/api/control/crawlconfigs"
            body: "*"
            additional_bindings {
                post: "/api/control/crawlconfigs/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteCrawlConfig (CrawlConfig) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/crawlconfigs/{id}"
        };
    }

    // Get a crawl schedule config by ID
    rpc GetCrawlScheduleConfig (GetRequest) returns (CrawlScheduleConfig) {
        option (google.api.http) = {
            get: "/api/control/crawlscheduleconfigs/{id}"
        };
    }
    // List a set of crawl schedule configs
    rpc ListCrawlScheduleConfigs (ListRequest) returns (CrawlScheduleConfigListReply) {
        option (google.api.http) = {
            get: "/api/control/crawlscheduleconfigs"
        };
    }
    rpc SaveCrawlScheduleConfig (CrawlScheduleConfig) returns (CrawlScheduleConfig) {
        option (google.api.http) = {
            put: "/api/control/crawlscheduleconfigs"
            body: "*"
            additional_bindings {
                post: "/api/control/crawlscheduleconfigs/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteCrawlScheduleConfig (CrawlScheduleConfig) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/crawlscheduleconfigs/{id}"
        };
    }

    // Get a politeness config by ID
    rpc GetPolitenessConfig (GetRequest) returns (PolitenessConfig) {
        option (google.api.http) = {
            get: "/api/control/politenessconfigs/{id}"
        };
    }
    // List a set of politeness configs
    rpc ListPolitenessConfigs (ListRequest) returns (PolitenessConfigListReply) {
        option (google.api.http) = {
            get: "/api/control/politenessconfigs"
        };
    }
    rpc SavePolitenessConfig (PolitenessConfig) returns (PolitenessConfig) {
        option (google.api.http) = {
            put: "/api/control/politenessconfigs"
            body: "*"
            additional_bindings {
                post: "/api/control/politenessconfigs/{id}"
				body: "*"
			}
        };
    }
    rpc DeletePolitenessConfig (PolitenessConfig) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/politenessconfigs/{id}"
        };
    }

    // Get a browser config by ID
    rpc GetBrowserConfig (GetRequest) returns (BrowserConfig) {
        option (google.api.http) = {
            get: "/api/control/browserconfigs/{id}"
        };
    }
    // List a set of browser configs
    rpc ListBrowserConfigs (ListRequest) returns (BrowserConfigListReply) {
        option (google.api.http) = {
            get: "/api/control/browserconfigs"
        };
    }
    rpc SaveBrowserConfig (BrowserConfig) returns (BrowserConfig) {
        option (google.api.http) = {
            put: "/api/control/browserconfigs"
            body: "*"
            additional_bindings {
                post: "/api/control/browserconfigs/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteBrowserConfig (BrowserConfig) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/browserconfigs/{id}"
        };
    }

    // Get a browser script by ID
    rpc GetBrowserScript (GetRequest) returns (BrowserScript) {
        option (google.api.http) = {
            get: "/api/control/browserscripts/{id}"
        };
    }
    // List a set of browser scripts
    rpc ListBrowserScripts (ListRequest) returns (BrowserScriptListReply) {
        option (google.api.http) = {
            get: "/api/control/browserscripts"
        };
    }
    rpc SaveBrowserScript (BrowserScript) returns (BrowserScript) {
        option (google.api.http) = {
            put: "/api/control/browserscripts"
            body: "*"
            additional_bindings {
                post: "/api/control/browserscripts/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteBrowserScript (BrowserScript) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/browserscripts/{id}"
        };
    }

    // Get a crawl host group config by ID
    rpc GetCrawlHostGroupConfig (GetRequest) returns (CrawlHostGroupConfig) {
        option (google.api.http) = {
            get: "/api/control/crawlhostgroupconfigs/{id}"
        };
    }
    // List a set of crawl host group configs
    rpc ListCrawlHostGroupConfigs (ListRequest) returns (CrawlHostGroupConfigListReply) {
        option (google.api.http) = {
            get: "/api/control/crawlhostgroupconfigs"
        };
    }
    rpc SaveCrawlHostGroupConfig (CrawlHostGroupConfig) returns (CrawlHostGroupConfig) {
        option (google.api.http) = {
            put: "/api/control/crawlhostgroupconfigs"
            body: "*"
            additional_bindings {
                post: "/api/control/crawlhostgroupconfigs/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteCrawlHostGroupConfig (CrawlHostGroupConfig) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/crawlhostgroupconfigs/{id}"
        };
    }

    rpc GetLogConfig (google.protobuf.Empty) returns (LogLevels) {
        option (google.api.http) = {
            get: "/api/control/logconfig"
        };
    }
    rpc SaveLogConfig (LogLevels) returns (LogLevels) {
        option (google.api.http) = {
            post: "/api/control/logconfig"
            body: "*"
        };
    }

    rpc ListRoleMappings (RoleMappingsListRequest) returns (RoleMappingsListReply) {
        option (google.api.http) = {
            get: "/api/control/rolemappings"
        };
    }
    rpc SaveRoleMapping (RoleMapping) returns (RoleMapping) {
        option (google.api.http) = {
            put: "/api/control/rolemappings"
            body: "*"
            additional_bindings {
                post: "/api/control/rolemappings/{id}"
				body: "*"
			}
        };
    }
    rpc DeleteRoleMapping (RoleMapping) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/control/rolemappings/{id}"
        };
    }

    rpc GetRolesForActiveUser (google.protobuf.Empty) returns (RoleList) {
        option (google.api.http) = {
            get: "/api/control/activeroles"
        };
    }

    rpc RunCrawl (RunCrawlRequest) returns (RunCrawlReply) {
        option (google.api.http) = {
            post: "/api/control/runcrawl"
            body: "*"
        };
    }
    rpc AbortCrawl (AbortCrawlRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/control/abortcrawl"
            body: "*"
        };
    }

    // Get the configured OpenID connect issuer address
    rpc GetOpenIdConnectIssuer (google.protobuf.Empty) returns (OpenIdConnectIssuerReply) {
        option (google.api.http) = {
            get: "/api/control/idp"
        };
    }
}

// Request for getting an object by id
message GetRequest {
    string id = 1;
}

// Specification of wich entities to get.
message ListRequest {
    string name = 1;
    // Select objects by label
    // A string representing a label query. The query matches if at least one label matches the query.
    // If there are multiple queries, then each query must match at least one label.
    // Label quries are case insensitive. The basic format is <code>key:value</code> where both key and value must match.
    // If value ends with <code>&ast;</code> then the key must match and value must match up until the <code>&ast;</code>.
    // If value is empty, all labels matching the key will match.
    // If key is empty, then the matching is done on the value for all keys.
    // If key is empty, then the <code>:</code> might be ommitted.
    // <pre>
    // Examples:
    //   "foo:bar"  - matches exactly labels with key=foo and value=bar
    //   "foo:"     - matches all labels with key=foo
    //   ":bar"     - matches all labels with value=bar
    //   "bar"      - matches all labels with value=bar
    //   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
    //   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
    //   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
    //   ":"        - matches every label
    //   ""         - matches every label
    // </pre>
    repeated string label_selector = 2;
    int32 page_size = 14;
    int32 page = 15;
}

// A list of entities
message CrawlEntityListReply {
    repeated CrawlEntity value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message SeedListRequest {
    string name = 1;
    string crawl_job_id = 2;
    string entity_id = 3;
    // Select objects by label
    // A string representing a label query. The query matches if at least one label matches the query.
    // If there are multiple queries, then each query must match at least one label.
    // Label quries are case insensitive. The basic format is "key:value" where both key and value must match.
    // If value ends with "*" then the key must match and value must match up until the "*".
    // If value is empty, all labels matching the key will match.
    // If key is empty, then the matching is done on the value for all keys.
    // If key is empty, then the ":" might be ommitted.
    // <pre>
    // Examples:
    //   "foo:bar"  - matches exactly labels with key=foo and value=bar
    //   "foo:"     - matches all labels with key=foo
    //   ":bar"     - matches all labels with value=bar
    //   "bar"      - matches all labels with value=bar
    //   "foo:ba*"  - matches labels with key=foo and value starting with ba (e.g. matches bar, but not ber)
    //   ":ba*"     - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
    //   "ba*"      - matches labels with any key and value starting with ba (e.g. matches bar, but not ber)
    //   ":"        - matches every label
    //   ""         - matches every label
    // </pre>
    repeated string label_selector = 4;
    int32 page_size = 14;
    int32 page = 15;
}

message SeedListReply {
    repeated Seed value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message CrawlJobListReply {
    repeated CrawlJob value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message CrawlConfigListReply {
    repeated CrawlConfig value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message CrawlScheduleConfigListReply {
    repeated CrawlScheduleConfig value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message PolitenessConfigListReply {
    repeated PolitenessConfig value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message BrowserConfigListReply {
    repeated BrowserConfig value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

// A list of browserscripts
message BrowserScriptListReply {
    repeated BrowserScript value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

// A list of CrawlHostGroupConfigs
message CrawlHostGroupConfigListReply {
    repeated CrawlHostGroupConfig value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

// Cick of a crawl job immediately
message RunCrawlRequest {
    string job_id = 5;
    // If seed id is submitted, only this seed will be harvested.
    // If empty, all seeds configured with the submitted job id will be harvested.
    string seed_id = 6;
}

message RunCrawlReply {
    repeated string seed_execution_id = 1;
}

message AbortCrawlRequest {
    string execution_id = 1;
}

message RoleList {
    repeated Role role = 1;
}

message RoleMappingsListRequest {
    string id = 1;
    int32 page_size = 14;
    int32 page = 15;
}

message RoleMappingsListReply {
    repeated RoleMapping value = 1;
    int64 count = 2;
    int32 page_size = 14;
    int32 page = 15;
}

message OpenIdConnectIssuerReply {
    string open_id_connect_issuer = 1;
}