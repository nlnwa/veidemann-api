// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.2
// source: frontier/v2/resources.proto

package frontier

import (
	v21 "github.com/nlnwa/veidemann-api/go/commons/v2"
	v2 "github.com/nlnwa/veidemann-api/go/config/v2"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CrawlExecutionStatus_State int32

const (
	CrawlExecutionStatus_UNDEFINED       CrawlExecutionStatus_State = 0
	CrawlExecutionStatus_CREATED         CrawlExecutionStatus_State = 1
	CrawlExecutionStatus_FETCHING        CrawlExecutionStatus_State = 2
	CrawlExecutionStatus_SLEEPING        CrawlExecutionStatus_State = 3
	CrawlExecutionStatus_FINISHED        CrawlExecutionStatus_State = 4
	CrawlExecutionStatus_ABORTED_TIMEOUT CrawlExecutionStatus_State = 5
	CrawlExecutionStatus_ABORTED_SIZE    CrawlExecutionStatus_State = 6
	CrawlExecutionStatus_ABORTED_MANUAL  CrawlExecutionStatus_State = 7
	CrawlExecutionStatus_FAILED          CrawlExecutionStatus_State = 8
	CrawlExecutionStatus_DIED            CrawlExecutionStatus_State = 9
)

// Enum value maps for CrawlExecutionStatus_State.
var (
	CrawlExecutionStatus_State_name = map[int32]string{
		0: "UNDEFINED",
		1: "CREATED",
		2: "FETCHING",
		3: "SLEEPING",
		4: "FINISHED",
		5: "ABORTED_TIMEOUT",
		6: "ABORTED_SIZE",
		7: "ABORTED_MANUAL",
		8: "FAILED",
		9: "DIED",
	}
	CrawlExecutionStatus_State_value = map[string]int32{
		"UNDEFINED":       0,
		"CREATED":         1,
		"FETCHING":        2,
		"SLEEPING":        3,
		"FINISHED":        4,
		"ABORTED_TIMEOUT": 5,
		"ABORTED_SIZE":    6,
		"ABORTED_MANUAL":  7,
		"FAILED":          8,
		"DIED":            9,
	}
)

func (x CrawlExecutionStatus_State) Enum() *CrawlExecutionStatus_State {
	p := new(CrawlExecutionStatus_State)
	*p = x
	return p
}

func (x CrawlExecutionStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrawlExecutionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_frontier_v2_resources_proto_enumTypes[0].Descriptor()
}

func (CrawlExecutionStatus_State) Type() protoreflect.EnumType {
	return &file_frontier_v2_resources_proto_enumTypes[0]
}

func (x CrawlExecutionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrawlExecutionStatus_State.Descriptor instead.
func (CrawlExecutionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{3, 0}
}

type JobExecutionStatus_State int32

const (
	JobExecutionStatus_UNDEFINED      JobExecutionStatus_State = 0
	JobExecutionStatus_CREATED        JobExecutionStatus_State = 1
	JobExecutionStatus_RUNNING        JobExecutionStatus_State = 2
	JobExecutionStatus_FINISHED       JobExecutionStatus_State = 3
	JobExecutionStatus_ABORTED_MANUAL JobExecutionStatus_State = 4
	JobExecutionStatus_FAILED         JobExecutionStatus_State = 5
	JobExecutionStatus_DIED           JobExecutionStatus_State = 6
)

// Enum value maps for JobExecutionStatus_State.
var (
	JobExecutionStatus_State_name = map[int32]string{
		0: "UNDEFINED",
		1: "CREATED",
		2: "RUNNING",
		3: "FINISHED",
		4: "ABORTED_MANUAL",
		5: "FAILED",
		6: "DIED",
	}
	JobExecutionStatus_State_value = map[string]int32{
		"UNDEFINED":      0,
		"CREATED":        1,
		"RUNNING":        2,
		"FINISHED":       3,
		"ABORTED_MANUAL": 4,
		"FAILED":         5,
		"DIED":           6,
	}
)

func (x JobExecutionStatus_State) Enum() *JobExecutionStatus_State {
	p := new(JobExecutionStatus_State)
	*p = x
	return p
}

func (x JobExecutionStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobExecutionStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_frontier_v2_resources_proto_enumTypes[1].Descriptor()
}

func (JobExecutionStatus_State) Type() protoreflect.EnumType {
	return &file_frontier_v2_resources_proto_enumTypes[1]
}

func (x JobExecutionStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobExecutionStatus_State.Descriptor instead.
func (JobExecutionStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{5, 0}
}

type QueuedUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiscoveredTimeStamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=discovered_time_stamp,json=discoveredTimeStamp,proto3" json:"discovered_time_stamp,omitempty"`
	// Sequence number to order the fetch of uris from a seed
	Sequence int64  `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Uri      string `protobuf:"bytes,5,opt,name=uri,proto3" json:"uri,omitempty"`
	Ip       string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	//*
	// Get the discoveryPath,
	//  R - Redirect
	//  E - Embed
	//  X - Speculative embed (aggressive/Javascript link extraction)
	//  L - Link
	//  P - Prerequisite (as for DNS or robots.txt before another URI)
	DiscoveryPath          string                 `protobuf:"bytes,8,opt,name=discovery_path,json=discoveryPath,proto3" json:"discovery_path,omitempty"`
	Referrer               string                 `protobuf:"bytes,9,opt,name=referrer,proto3" json:"referrer,omitempty"`
	Cookies                []*Cookie              `protobuf:"bytes,10,rep,name=cookies,proto3" json:"cookies,omitempty"`
	PageFetchTimeMs        int64                  `protobuf:"varint,11,opt,name=page_fetch_time_ms,json=pageFetchTimeMs,proto3" json:"page_fetch_time_ms,omitempty"`                     // The time used to fetch and render the the uri including dependencies
	Retries                int32                  `protobuf:"varint,12,opt,name=retries,proto3" json:"retries,omitempty"`                                                                // Number of times this uri has been scheduled for retry.
	EarliestFetchTimeStamp *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=earliest_fetch_time_stamp,json=earliestFetchTimeStamp,proto3" json:"earliest_fetch_time_stamp,omitempty"` // Do not fetch this uri before this time
	CrawlHostGroupId       string                 `protobuf:"bytes,14,opt,name=crawl_host_group_id,json=crawlHostGroupId,proto3" json:"crawl_host_group_id,omitempty"`                   // The Crawl Host Group calculated for this uri
	PolitenessRef          *v2.ConfigRef          `protobuf:"bytes,15,opt,name=politeness_ref,json=politenessRef,proto3" json:"politeness_ref,omitempty"`                                // Ref to the politeness config used when discovering this uri
	Error                  *v21.Error             `protobuf:"bytes,16,opt,name=error,proto3" json:"error,omitempty"`                                                                     // Contains the error reason if fetch failed
	Unresolved             bool                   `protobuf:"varint,18,opt,name=unresolved,proto3" json:"unresolved,omitempty"`                                                          // If true, then this uri is just added to the queue and no resolution of ip or robots.txt checks are done yet.
	FetchStartTimeStamp    *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=fetch_start_time_stamp,json=fetchStartTimeStamp,proto3" json:"fetch_start_time_stamp,omitempty"`
	// The weighting between jobs when two jobs compete on fetching resources from the same hosts.
	// Copied from CrawlConfig for efficiency.
	PriorityWeight float64 `protobuf:"fixed64,20,opt,name=priority_weight,json=priorityWeight,proto3" json:"priority_weight,omitempty"`
	// The seed uri which was the starting point for this uri.
	SeedUri string `protobuf:"bytes,21,opt,name=seed_uri,json=seedUri,proto3" json:"seed_uri,omitempty"`
	// Annotations used as parameters to scripts.
	Annotation []*v2.Annotation `protobuf:"bytes,22,rep,name=annotation,proto3" json:"annotation,omitempty"`
}

func (x *QueuedUrl) Reset() {
	*x = QueuedUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuedUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuedUrl) ProtoMessage() {}

func (x *QueuedUrl) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuedUrl.ProtoReflect.Descriptor instead.
func (*QueuedUrl) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{0}
}

func (x *QueuedUrl) GetDiscoveredTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DiscoveredTimeStamp
	}
	return nil
}

func (x *QueuedUrl) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *QueuedUrl) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *QueuedUrl) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *QueuedUrl) GetDiscoveryPath() string {
	if x != nil {
		return x.DiscoveryPath
	}
	return ""
}

func (x *QueuedUrl) GetReferrer() string {
	if x != nil {
		return x.Referrer
	}
	return ""
}

func (x *QueuedUrl) GetCookies() []*Cookie {
	if x != nil {
		return x.Cookies
	}
	return nil
}

func (x *QueuedUrl) GetPageFetchTimeMs() int64 {
	if x != nil {
		return x.PageFetchTimeMs
	}
	return 0
}

func (x *QueuedUrl) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *QueuedUrl) GetEarliestFetchTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestFetchTimeStamp
	}
	return nil
}

func (x *QueuedUrl) GetCrawlHostGroupId() string {
	if x != nil {
		return x.CrawlHostGroupId
	}
	return ""
}

func (x *QueuedUrl) GetPolitenessRef() *v2.ConfigRef {
	if x != nil {
		return x.PolitenessRef
	}
	return nil
}

func (x *QueuedUrl) GetError() *v21.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *QueuedUrl) GetUnresolved() bool {
	if x != nil {
		return x.Unresolved
	}
	return false
}

func (x *QueuedUrl) GetFetchStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchStartTimeStamp
	}
	return nil
}

func (x *QueuedUrl) GetPriorityWeight() float64 {
	if x != nil {
		return x.PriorityWeight
	}
	return 0
}

func (x *QueuedUrl) GetSeedUri() string {
	if x != nil {
		return x.SeedUri
	}
	return ""
}

func (x *QueuedUrl) GetAnnotation() []*v2.Annotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

type Cookie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cookie name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cookie value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Cookie domain.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Cookie path.
	Path string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	// Cookie expiration date as the number of seconds since the UNIX epoch.
	Expires float64 `protobuf:"fixed64,5,opt,name=expires,proto3" json:"expires,omitempty"`
	// Cookie size.
	Size int32 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// True if cookie is http-only.
	HttpOnly bool `protobuf:"varint,7,opt,name=http_only,json=httpOnly,proto3" json:"http_only,omitempty"`
	// True if cookie is secure.
	Secure bool `protobuf:"varint,8,opt,name=secure,proto3" json:"secure,omitempty"`
	// True in case of session cookie.
	Session bool `protobuf:"varint,9,opt,name=session,proto3" json:"session,omitempty"`
	// Cookie SameSite type.
	SameSite string `protobuf:"bytes,10,opt,name=same_site,json=sameSite,proto3" json:"same_site,omitempty"`
}

func (x *Cookie) Reset() {
	*x = Cookie{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cookie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cookie) ProtoMessage() {}

func (x *Cookie) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cookie.ProtoReflect.Descriptor instead.
func (*Cookie) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{1}
}

func (x *Cookie) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cookie) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Cookie) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Cookie) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Cookie) GetExpires() float64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *Cookie) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Cookie) GetHttpOnly() bool {
	if x != nil {
		return x.HttpOnly
	}
	return false
}

func (x *Cookie) GetSecure() bool {
	if x != nil {
		return x.Secure
	}
	return false
}

func (x *Cookie) GetSession() bool {
	if x != nil {
		return x.Session
	}
	return false
}

func (x *Cookie) GetSameSite() string {
	if x != nil {
		return x.SameSite
	}
	return ""
}

type CrawlHostGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If IP-address is not resolved this is SHA-1 of URL.
	// After IP-resolution this is SHA-1 hash of IP or CrawlHostGroupConfig id if one such config matched.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Lover limit for time between pageloads from this CrawlHostGroup.
	MinTimeBetweenPageLoadMs int64 `protobuf:"varint,2,opt,name=min_time_between_page_load_ms,json=minTimeBetweenPageLoadMs,proto3" json:"min_time_between_page_load_ms,omitempty"`
	// Upper limit for time between pageloads from this CrawlHostGroup.
	// This is the upper limit for calculation of dealy time, but actual time might be higher depending on
	// the harvesters capacity.
	MaxTimeBetweenPageLoadMs int64 `protobuf:"varint,3,opt,name=max_time_between_page_load_ms,json=maxTimeBetweenPageLoadMs,proto3" json:"max_time_between_page_load_ms,omitempty"`
	// The fetch time of the URI is multiplied with this value to get the delay time before fetching the next URI.
	// If min_time_between_page_load_ms and/or max_time_between_page_load_ms are set, then those values are used as
	// the upper/lower limits for delay.
	// If delay_factor is unset or zero, then a delay_facor of one is assumed. If delay_factor is negative,
	// a delay_factor of zero is assumed.
	DelayFactor float32 `protobuf:"fixed32,4,opt,name=delay_factor,json=delayFactor,proto3" json:"delay_factor,omitempty"`
	// The maximum number of retries before giving up fetching a uri.
	MaxRetries int32 `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// The minimum time before a failed page load is retried.
	RetryDelaySeconds int32 `protobuf:"varint,6,opt,name=retry_delay_seconds,json=retryDelaySeconds,proto3" json:"retry_delay_seconds,omitempty"`
	// The number of queued Uri's belonging to this CrawlHostGroup
	QueuedUriCount int64 `protobuf:"varint,7,opt,name=queued_uri_count,json=queuedUriCount,proto3" json:"queued_uri_count,omitempty"`
	// If this CrawlHostGroup is busy, this field contains the id of the uri currently beeing fetched.
	CurrentUriId string `protobuf:"bytes,8,opt,name=current_uri_id,json=currentUriId,proto3" json:"current_uri_id,omitempty"`
	// Token to guard against two harvesters responding to the same request.
	SessionToken string `protobuf:"bytes,9,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	// The time when frontier sent a PageHarvestSpec to a harvester.
	FetchStartTimeStamp *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=fetch_start_time_stamp,json=fetchStartTimeStamp,proto3" json:"fetch_start_time_stamp,omitempty"`
}

func (x *CrawlHostGroup) Reset() {
	*x = CrawlHostGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlHostGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlHostGroup) ProtoMessage() {}

func (x *CrawlHostGroup) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlHostGroup.ProtoReflect.Descriptor instead.
func (*CrawlHostGroup) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{2}
}

func (x *CrawlHostGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrawlHostGroup) GetMinTimeBetweenPageLoadMs() int64 {
	if x != nil {
		return x.MinTimeBetweenPageLoadMs
	}
	return 0
}

func (x *CrawlHostGroup) GetMaxTimeBetweenPageLoadMs() int64 {
	if x != nil {
		return x.MaxTimeBetweenPageLoadMs
	}
	return 0
}

func (x *CrawlHostGroup) GetDelayFactor() float32 {
	if x != nil {
		return x.DelayFactor
	}
	return 0
}

func (x *CrawlHostGroup) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *CrawlHostGroup) GetRetryDelaySeconds() int32 {
	if x != nil {
		return x.RetryDelaySeconds
	}
	return 0
}

func (x *CrawlHostGroup) GetQueuedUriCount() int64 {
	if x != nil {
		return x.QueuedUriCount
	}
	return 0
}

func (x *CrawlHostGroup) GetCurrentUriId() string {
	if x != nil {
		return x.CurrentUriId
	}
	return ""
}

func (x *CrawlHostGroup) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CrawlHostGroup) GetFetchStartTimeStamp() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchStartTimeStamp
	}
	return nil
}

// Metadata about a crawl execution.
// A crawl execution is the complete harvest of a seed as specified in the connected job's configuration.
type CrawlExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State               CrawlExecutionStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=veidemann.api.frontier.v2.CrawlExecutionStatus_State" json:"state,omitempty"`
	JobId               string                     `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	SeedId              string                     `protobuf:"bytes,4,opt,name=seed_id,json=seedId,proto3" json:"seed_id,omitempty"`
	StartTime           *timestamppb.Timestamp     `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // When this crawl execution started crawling
	EndTime             *timestamppb.Timestamp     `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // When this crawl execution ended
	DocumentsCrawled    int64                      `protobuf:"varint,8,opt,name=documents_crawled,json=documentsCrawled,proto3" json:"documents_crawled,omitempty"`
	BytesCrawled        int64                      `protobuf:"varint,9,opt,name=bytes_crawled,json=bytesCrawled,proto3" json:"bytes_crawled,omitempty"`
	UrisCrawled         int64                      `protobuf:"varint,10,opt,name=uris_crawled,json=urisCrawled,proto3" json:"uris_crawled,omitempty"`
	DocumentsFailed     int64                      `protobuf:"varint,11,opt,name=documents_failed,json=documentsFailed,proto3" json:"documents_failed,omitempty"`
	DocumentsOutOfScope int64                      `protobuf:"varint,12,opt,name=documents_out_of_scope,json=documentsOutOfScope,proto3" json:"documents_out_of_scope,omitempty"`
	DocumentsRetried    int64                      `protobuf:"varint,13,opt,name=documents_retried,json=documentsRetried,proto3" json:"documents_retried,omitempty"`
	DocumentsDenied     int64                      `protobuf:"varint,14,opt,name=documents_denied,json=documentsDenied,proto3" json:"documents_denied,omitempty"`
	LastChangeTime      *timestamppb.Timestamp     `protobuf:"bytes,15,opt,name=last_change_time,json=lastChangeTime,proto3" json:"last_change_time,omitempty"` // When this record was last updated
	CreatedTime         *timestamppb.Timestamp     `protobuf:"bytes,16,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`            // When this crawl execution was created
	CurrentUriId        []string                   `protobuf:"bytes,20,rep,name=current_uri_id,json=currentUriId,proto3" json:"current_uri_id,omitempty"`
	JobExecutionId      string                     `protobuf:"bytes,21,opt,name=job_execution_id,json=jobExecutionId,proto3" json:"job_execution_id,omitempty"`
	Error               *v21.Error                 `protobuf:"bytes,22,opt,name=error,proto3" json:"error,omitempty"`                                                                                              // Extra description of error state
	DesiredState        CrawlExecutionStatus_State `protobuf:"varint,23,opt,name=desired_state,json=desiredState,proto3,enum=veidemann.api.frontier.v2.CrawlExecutionStatus_State" json:"desired_state,omitempty"` // Used when external process want to abort execution
}

func (x *CrawlExecutionStatus) Reset() {
	*x = CrawlExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlExecutionStatus) ProtoMessage() {}

func (x *CrawlExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlExecutionStatus.ProtoReflect.Descriptor instead.
func (*CrawlExecutionStatus) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{3}
}

func (x *CrawlExecutionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrawlExecutionStatus) GetState() CrawlExecutionStatus_State {
	if x != nil {
		return x.State
	}
	return CrawlExecutionStatus_UNDEFINED
}

func (x *CrawlExecutionStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CrawlExecutionStatus) GetSeedId() string {
	if x != nil {
		return x.SeedId
	}
	return ""
}

func (x *CrawlExecutionStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *CrawlExecutionStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CrawlExecutionStatus) GetDocumentsCrawled() int64 {
	if x != nil {
		return x.DocumentsCrawled
	}
	return 0
}

func (x *CrawlExecutionStatus) GetBytesCrawled() int64 {
	if x != nil {
		return x.BytesCrawled
	}
	return 0
}

func (x *CrawlExecutionStatus) GetUrisCrawled() int64 {
	if x != nil {
		return x.UrisCrawled
	}
	return 0
}

func (x *CrawlExecutionStatus) GetDocumentsFailed() int64 {
	if x != nil {
		return x.DocumentsFailed
	}
	return 0
}

func (x *CrawlExecutionStatus) GetDocumentsOutOfScope() int64 {
	if x != nil {
		return x.DocumentsOutOfScope
	}
	return 0
}

func (x *CrawlExecutionStatus) GetDocumentsRetried() int64 {
	if x != nil {
		return x.DocumentsRetried
	}
	return 0
}

func (x *CrawlExecutionStatus) GetDocumentsDenied() int64 {
	if x != nil {
		return x.DocumentsDenied
	}
	return 0
}

func (x *CrawlExecutionStatus) GetLastChangeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChangeTime
	}
	return nil
}

func (x *CrawlExecutionStatus) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *CrawlExecutionStatus) GetCurrentUriId() []string {
	if x != nil {
		return x.CurrentUriId
	}
	return nil
}

func (x *CrawlExecutionStatus) GetJobExecutionId() string {
	if x != nil {
		return x.JobExecutionId
	}
	return ""
}

func (x *CrawlExecutionStatus) GetError() *v21.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CrawlExecutionStatus) GetDesiredState() CrawlExecutionStatus_State {
	if x != nil {
		return x.DesiredState
	}
	return CrawlExecutionStatus_UNDEFINED
}

type CrawlExecutionStatusChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	State                  CrawlExecutionStatus_State `protobuf:"varint,2,opt,name=state,proto3,enum=veidemann.api.frontier.v2.CrawlExecutionStatus_State" json:"state,omitempty"`
	EndTime                *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"` // When this crawl execution ended
	AddDocumentsCrawled    int64                      `protobuf:"varint,5,opt,name=add_documents_crawled,json=addDocumentsCrawled,proto3" json:"add_documents_crawled,omitempty"`
	AddBytesCrawled        int64                      `protobuf:"varint,6,opt,name=add_bytes_crawled,json=addBytesCrawled,proto3" json:"add_bytes_crawled,omitempty"`
	AddUrisCrawled         int64                      `protobuf:"varint,7,opt,name=add_uris_crawled,json=addUrisCrawled,proto3" json:"add_uris_crawled,omitempty"`
	AddDocumentsFailed     int64                      `protobuf:"varint,8,opt,name=add_documents_failed,json=addDocumentsFailed,proto3" json:"add_documents_failed,omitempty"`
	AddDocumentsOutOfScope int64                      `protobuf:"varint,9,opt,name=add_documents_out_of_scope,json=addDocumentsOutOfScope,proto3" json:"add_documents_out_of_scope,omitempty"`
	AddDocumentsRetried    int64                      `protobuf:"varint,10,opt,name=add_documents_retried,json=addDocumentsRetried,proto3" json:"add_documents_retried,omitempty"`
	AddDocumentsDenied     int64                      `protobuf:"varint,11,opt,name=add_documents_denied,json=addDocumentsDenied,proto3" json:"add_documents_denied,omitempty"`
	AddCurrentUri          *QueuedUrl                 `protobuf:"bytes,12,opt,name=add_current_uri,json=addCurrentUri,proto3" json:"add_current_uri,omitempty"`
	DeleteCurrentUri       *QueuedUrl                 `protobuf:"bytes,13,opt,name=delete_current_uri,json=deleteCurrentUri,proto3" json:"delete_current_uri,omitempty"`
	Error                  *v21.Error                 `protobuf:"bytes,14,opt,name=error,proto3" json:"error,omitempty"` // Extra description of error state
}

func (x *CrawlExecutionStatusChange) Reset() {
	*x = CrawlExecutionStatusChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlExecutionStatusChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlExecutionStatusChange) ProtoMessage() {}

func (x *CrawlExecutionStatusChange) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlExecutionStatusChange.ProtoReflect.Descriptor instead.
func (*CrawlExecutionStatusChange) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{4}
}

func (x *CrawlExecutionStatusChange) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CrawlExecutionStatusChange) GetState() CrawlExecutionStatus_State {
	if x != nil {
		return x.State
	}
	return CrawlExecutionStatus_UNDEFINED
}

func (x *CrawlExecutionStatusChange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *CrawlExecutionStatusChange) GetAddDocumentsCrawled() int64 {
	if x != nil {
		return x.AddDocumentsCrawled
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddBytesCrawled() int64 {
	if x != nil {
		return x.AddBytesCrawled
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddUrisCrawled() int64 {
	if x != nil {
		return x.AddUrisCrawled
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddDocumentsFailed() int64 {
	if x != nil {
		return x.AddDocumentsFailed
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddDocumentsOutOfScope() int64 {
	if x != nil {
		return x.AddDocumentsOutOfScope
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddDocumentsRetried() int64 {
	if x != nil {
		return x.AddDocumentsRetried
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddDocumentsDenied() int64 {
	if x != nil {
		return x.AddDocumentsDenied
	}
	return 0
}

func (x *CrawlExecutionStatusChange) GetAddCurrentUri() *QueuedUrl {
	if x != nil {
		return x.AddCurrentUri
	}
	return nil
}

func (x *CrawlExecutionStatusChange) GetDeleteCurrentUri() *QueuedUrl {
	if x != nil {
		return x.DeleteCurrentUri
	}
	return nil
}

func (x *CrawlExecutionStatusChange) GetError() *v21.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// Metadata about an execution of a job.
// A job execution is the sum of all crawl executions for a job at a specific time.
type JobExecutionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	JobId               string                   `protobuf:"bytes,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	State               JobExecutionStatus_State `protobuf:"varint,3,opt,name=state,proto3,enum=veidemann.api.frontier.v2.JobExecutionStatus_State" json:"state,omitempty"`
	ExecutionsState     map[string]int32         `protobuf:"bytes,4,rep,name=executions_state,json=executionsState,proto3" json:"executions_state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StartTime           *timestamppb.Timestamp   `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime             *timestamppb.Timestamp   `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	DocumentsCrawled    int64                    `protobuf:"varint,8,opt,name=documents_crawled,json=documentsCrawled,proto3" json:"documents_crawled,omitempty"`
	BytesCrawled        int64                    `protobuf:"varint,9,opt,name=bytes_crawled,json=bytesCrawled,proto3" json:"bytes_crawled,omitempty"`
	UrisCrawled         int64                    `protobuf:"varint,10,opt,name=uris_crawled,json=urisCrawled,proto3" json:"uris_crawled,omitempty"`
	DocumentsFailed     int64                    `protobuf:"varint,11,opt,name=documents_failed,json=documentsFailed,proto3" json:"documents_failed,omitempty"`
	DocumentsOutOfScope int64                    `protobuf:"varint,12,opt,name=documents_out_of_scope,json=documentsOutOfScope,proto3" json:"documents_out_of_scope,omitempty"`
	DocumentsRetried    int64                    `protobuf:"varint,13,opt,name=documents_retried,json=documentsRetried,proto3" json:"documents_retried,omitempty"`
	DocumentsDenied     int64                    `protobuf:"varint,14,opt,name=documents_denied,json=documentsDenied,proto3" json:"documents_denied,omitempty"`
	Error               *v21.Error               `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`                                                                                            // Extra description of error state
	DesiredState        JobExecutionStatus_State `protobuf:"varint,16,opt,name=desired_state,json=desiredState,proto3,enum=veidemann.api.frontier.v2.JobExecutionStatus_State" json:"desired_state,omitempty"` // Used when external process want to abort execution
}

func (x *JobExecutionStatus) Reset() {
	*x = JobExecutionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_frontier_v2_resources_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobExecutionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobExecutionStatus) ProtoMessage() {}

func (x *JobExecutionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_frontier_v2_resources_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobExecutionStatus.ProtoReflect.Descriptor instead.
func (*JobExecutionStatus) Descriptor() ([]byte, []int) {
	return file_frontier_v2_resources_proto_rawDescGZIP(), []int{5}
}

func (x *JobExecutionStatus) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *JobExecutionStatus) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *JobExecutionStatus) GetState() JobExecutionStatus_State {
	if x != nil {
		return x.State
	}
	return JobExecutionStatus_UNDEFINED
}

func (x *JobExecutionStatus) GetExecutionsState() map[string]int32 {
	if x != nil {
		return x.ExecutionsState
	}
	return nil
}

func (x *JobExecutionStatus) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobExecutionStatus) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *JobExecutionStatus) GetDocumentsCrawled() int64 {
	if x != nil {
		return x.DocumentsCrawled
	}
	return 0
}

func (x *JobExecutionStatus) GetBytesCrawled() int64 {
	if x != nil {
		return x.BytesCrawled
	}
	return 0
}

func (x *JobExecutionStatus) GetUrisCrawled() int64 {
	if x != nil {
		return x.UrisCrawled
	}
	return 0
}

func (x *JobExecutionStatus) GetDocumentsFailed() int64 {
	if x != nil {
		return x.DocumentsFailed
	}
	return 0
}

func (x *JobExecutionStatus) GetDocumentsOutOfScope() int64 {
	if x != nil {
		return x.DocumentsOutOfScope
	}
	return 0
}

func (x *JobExecutionStatus) GetDocumentsRetried() int64 {
	if x != nil {
		return x.DocumentsRetried
	}
	return 0
}

func (x *JobExecutionStatus) GetDocumentsDenied() int64 {
	if x != nil {
		return x.DocumentsDenied
	}
	return 0
}

func (x *JobExecutionStatus) GetError() *v21.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *JobExecutionStatus) GetDesiredState() JobExecutionStatus_State {
	if x != nil {
		return x.DesiredState
	}
	return JobExecutionStatus_UNDEFINED
}

var File_frontier_v2_resources_proto protoreflect.FileDescriptor

var file_frontier_v2_resources_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x1a, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x73, 0x2f, 0x76, 0x32, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x32, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe2, 0x06, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x4e,
	0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x12,
	0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6f,
	0x6b, 0x69, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x19, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f,
	0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x16, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x13, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x48, 0x6f,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x6f, 0x6c,
	0x69, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x66, 0x52, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x16, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x66, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x65, 0x64, 0x55, 0x72, 0x69,
	0x12, 0x43, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x32, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6f, 0x6b, 0x69, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6d, 0x65, 0x53, 0x69, 0x74, 0x65,
	0x22, 0xdc, 0x03, 0x0a, 0x0e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x61, 0x64, 0x4d, 0x73, 0x12, 0x3f, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x6d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x61, 0x64, 0x4d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x74, 0x72, 0x79, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55, 0x72, 0x69, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x4f,
	0x0a, 0x16, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0xcb, 0x08, 0x0a, 0x14, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x65, 0x65, 0x64, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x69,
	0x73, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x75, 0x72, 0x69, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6a, 0x6f, 0x62, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x5a, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x45, 0x44, 0x10, 0x09, 0x22, 0xe7, 0x05,
	0x0a, 0x1a, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x65,
	0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x61, 0x64, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x72, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x64, 0x64, 0x55,
	0x72, 0x69, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x64,
	0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x1a,
	0x61, 0x64, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14,
	0x61, 0x64, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x64, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d,
	0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69, 0x12, 0x52, 0x0a, 0x12,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x52, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x69,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xd3, 0x07, 0x0a, 0x12, 0x4a, 0x6f, 0x62, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x6d, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x76, 0x65, 0x69,
	0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x69, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x72, 0x69, 0x73, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6f,
	0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x4f,
	0x66, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x58, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x76,
	0x65, 0x69, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x4a, 0x6f, 0x62, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a,
	0x42, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x68, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x45, 0x44, 0x10, 0x06, 0x42, 0x72, 0x0a,
	0x23, 0x6e, 0x6f, 0x2e, 0x6e, 0x62, 0x2e, 0x6e, 0x6e, 0x61, 0x2e, 0x76, 0x65, 0x69, 0x64, 0x65,
	0x6d, 0x61, 0x6e, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x42, 0x11, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x6c, 0x6e, 0x77, 0x61, 0x2f, 0x76, 0x65, 0x69, 0x64,
	0x65, 0x6d, 0x61, 0x6e, 0x6e, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x69, 0x65, 0x72, 0x2f, 0x76, 0x32, 0x3b, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x69, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_frontier_v2_resources_proto_rawDescOnce sync.Once
	file_frontier_v2_resources_proto_rawDescData = file_frontier_v2_resources_proto_rawDesc
)

func file_frontier_v2_resources_proto_rawDescGZIP() []byte {
	file_frontier_v2_resources_proto_rawDescOnce.Do(func() {
		file_frontier_v2_resources_proto_rawDescData = protoimpl.X.CompressGZIP(file_frontier_v2_resources_proto_rawDescData)
	})
	return file_frontier_v2_resources_proto_rawDescData
}

var file_frontier_v2_resources_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_frontier_v2_resources_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_frontier_v2_resources_proto_goTypes = []interface{}{
	(CrawlExecutionStatus_State)(0),    // 0: veidemann.api.frontier.v2.CrawlExecutionStatus.State
	(JobExecutionStatus_State)(0),      // 1: veidemann.api.frontier.v2.JobExecutionStatus.State
	(*QueuedUrl)(nil),                  // 2: veidemann.api.frontier.v2.QueuedUrl
	(*Cookie)(nil),                     // 3: veidemann.api.frontier.v2.Cookie
	(*CrawlHostGroup)(nil),             // 4: veidemann.api.frontier.v2.CrawlHostGroup
	(*CrawlExecutionStatus)(nil),       // 5: veidemann.api.frontier.v2.CrawlExecutionStatus
	(*CrawlExecutionStatusChange)(nil), // 6: veidemann.api.frontier.v2.CrawlExecutionStatusChange
	(*JobExecutionStatus)(nil),         // 7: veidemann.api.frontier.v2.JobExecutionStatus
	nil,                                // 8: veidemann.api.frontier.v2.JobExecutionStatus.ExecutionsStateEntry
	(*timestamppb.Timestamp)(nil),      // 9: google.protobuf.Timestamp
	(*v2.ConfigRef)(nil),               // 10: veidemann.api.config.v2.ConfigRef
	(*v21.Error)(nil),                  // 11: veidemann.api.commons.v2.Error
	(*v2.Annotation)(nil),              // 12: veidemann.api.config.v2.Annotation
}
var file_frontier_v2_resources_proto_depIdxs = []int32{
	9,  // 0: veidemann.api.frontier.v2.QueuedUrl.discovered_time_stamp:type_name -> google.protobuf.Timestamp
	3,  // 1: veidemann.api.frontier.v2.QueuedUrl.cookies:type_name -> veidemann.api.frontier.v2.Cookie
	9,  // 2: veidemann.api.frontier.v2.QueuedUrl.earliest_fetch_time_stamp:type_name -> google.protobuf.Timestamp
	10, // 3: veidemann.api.frontier.v2.QueuedUrl.politeness_ref:type_name -> veidemann.api.config.v2.ConfigRef
	11, // 4: veidemann.api.frontier.v2.QueuedUrl.error:type_name -> veidemann.api.commons.v2.Error
	9,  // 5: veidemann.api.frontier.v2.QueuedUrl.fetch_start_time_stamp:type_name -> google.protobuf.Timestamp
	12, // 6: veidemann.api.frontier.v2.QueuedUrl.annotation:type_name -> veidemann.api.config.v2.Annotation
	9,  // 7: veidemann.api.frontier.v2.CrawlHostGroup.fetch_start_time_stamp:type_name -> google.protobuf.Timestamp
	0,  // 8: veidemann.api.frontier.v2.CrawlExecutionStatus.state:type_name -> veidemann.api.frontier.v2.CrawlExecutionStatus.State
	9,  // 9: veidemann.api.frontier.v2.CrawlExecutionStatus.start_time:type_name -> google.protobuf.Timestamp
	9,  // 10: veidemann.api.frontier.v2.CrawlExecutionStatus.end_time:type_name -> google.protobuf.Timestamp
	9,  // 11: veidemann.api.frontier.v2.CrawlExecutionStatus.last_change_time:type_name -> google.protobuf.Timestamp
	9,  // 12: veidemann.api.frontier.v2.CrawlExecutionStatus.created_time:type_name -> google.protobuf.Timestamp
	11, // 13: veidemann.api.frontier.v2.CrawlExecutionStatus.error:type_name -> veidemann.api.commons.v2.Error
	0,  // 14: veidemann.api.frontier.v2.CrawlExecutionStatus.desired_state:type_name -> veidemann.api.frontier.v2.CrawlExecutionStatus.State
	0,  // 15: veidemann.api.frontier.v2.CrawlExecutionStatusChange.state:type_name -> veidemann.api.frontier.v2.CrawlExecutionStatus.State
	9,  // 16: veidemann.api.frontier.v2.CrawlExecutionStatusChange.end_time:type_name -> google.protobuf.Timestamp
	2,  // 17: veidemann.api.frontier.v2.CrawlExecutionStatusChange.add_current_uri:type_name -> veidemann.api.frontier.v2.QueuedUrl
	2,  // 18: veidemann.api.frontier.v2.CrawlExecutionStatusChange.delete_current_uri:type_name -> veidemann.api.frontier.v2.QueuedUrl
	11, // 19: veidemann.api.frontier.v2.CrawlExecutionStatusChange.error:type_name -> veidemann.api.commons.v2.Error
	1,  // 20: veidemann.api.frontier.v2.JobExecutionStatus.state:type_name -> veidemann.api.frontier.v2.JobExecutionStatus.State
	8,  // 21: veidemann.api.frontier.v2.JobExecutionStatus.executions_state:type_name -> veidemann.api.frontier.v2.JobExecutionStatus.ExecutionsStateEntry
	9,  // 22: veidemann.api.frontier.v2.JobExecutionStatus.start_time:type_name -> google.protobuf.Timestamp
	9,  // 23: veidemann.api.frontier.v2.JobExecutionStatus.end_time:type_name -> google.protobuf.Timestamp
	11, // 24: veidemann.api.frontier.v2.JobExecutionStatus.error:type_name -> veidemann.api.commons.v2.Error
	1,  // 25: veidemann.api.frontier.v2.JobExecutionStatus.desired_state:type_name -> veidemann.api.frontier.v2.JobExecutionStatus.State
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_frontier_v2_resources_proto_init() }
func file_frontier_v2_resources_proto_init() {
	if File_frontier_v2_resources_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_frontier_v2_resources_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuedUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontier_v2_resources_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cookie); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontier_v2_resources_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlHostGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontier_v2_resources_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontier_v2_resources_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlExecutionStatusChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_frontier_v2_resources_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobExecutionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_frontier_v2_resources_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_frontier_v2_resources_proto_goTypes,
		DependencyIndexes: file_frontier_v2_resources_proto_depIdxs,
		EnumInfos:         file_frontier_v2_resources_proto_enumTypes,
		MessageInfos:      file_frontier_v2_resources_proto_msgTypes,
	}.Build()
	File_frontier_v2_resources_proto = out.File
	file_frontier_v2_resources_proto_rawDesc = nil
	file_frontier_v2_resources_proto_goTypes = nil
	file_frontier_v2_resources_proto_depIdxs = nil
}
